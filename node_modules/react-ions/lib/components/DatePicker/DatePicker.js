'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _propTypes = require('prop-types');

var _propTypes2 = _interopRequireDefault(_propTypes);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

var _SelectField = require('../SelectField/SelectField');

var _SelectField2 = _interopRequireDefault(_SelectField);

var _style = require('./style.scss');

var _style2 = _interopRequireDefault(_style);

var _OptClass = require('../internal/OptClass');

var _OptClass2 = _interopRequireDefault(_OptClass);

var _DateHelper = require('./DateHelper');

var _DateHelper2 = _interopRequireDefault(_DateHelper);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The DatePicker component.
 */
var DatePicker = function (_React$Component) {
  _inherits(DatePicker, _React$Component);

  function DatePicker(props) {
    _classCallCheck(this, DatePicker);

    var _this = _possibleConstructorReturn(this, (DatePicker.__proto__ || Object.getPrototypeOf(DatePicker)).call(this, props));

    _initialiseProps.call(_this);

    return _this;
  }

  /**
   *
   * @param {Object} minOrMax Example: { month: '-0', day: '-0', year: '-10' } | { month: 'current', day: 'current', year: 'current' }
   * @param {String} type String. Options: ['year', 'month', 'day']
   * @returns {Number} Calculated min or max value for given type
   * @private
   */


  /**
   *
   * @param {Integer} min First year
   * @param {Integer} max Last year
   * @returns {Array} Array of objects, ex. [{ value: '2010' }, (...), { value: '2020' }]
   * @private
   */


  /**
   *
   * @param {Object} dateObj State object
   * @returns {Array} Array of objects, ex. [{ value: '0', display: 'Jan' }, (...), { value: '11', display: 'Dec' }]
   * @private
   */


  /**
   *
   * @param {Object} dateObj State object
   * @returns {Array} Array of objects, ex. [{ value: '1' }, (...), { value: '31' }]
   * @private
   */


  /**
   *
   * @param {Object} state State object
   * @param {String} format String with a valid moment.js format, ex. 'YYYY-MM-DD'
   * @returns {String} Date string according to passed format, ex. '2016-09-04'
   * @private
   */


  _createClass(DatePicker, [{
    key: 'render',
    value: function render() {
      var _props = this.props,
          inlineSmallScreen = _props.inlineSmallScreen,
          label = _props.label,
          optClass = _props.optClass;

      var inlineSmallScreenClass = inlineSmallScreen ? _style2.default['inline-small-screen'] : null;
      var componentClass = (0, _OptClass2.default)(_style2.default, ['datepicker-component', inlineSmallScreenClass], optClass);

      return _react2.default.createElement(
        'div',
        { className: componentClass },
        label && _react2.default.createElement(
          'label',
          null,
          label
        ),
        _react2.default.createElement(
          'div',
          { className: _style2.default['datepicker'] },
          _react2.default.createElement(_SelectField2.default, {
            changeCallback: this.handleChangeMonth,
            disabled: this.props.disabled,
            displayProp: 'display',
            options: this.state.month.options,
            placeholder: this.props.placeholder.month,
            valueProp: 'value',
            value: this.state.month.value.toString()
          }),
          _react2.default.createElement(_SelectField2.default, {
            changeCallback: this.handleChangeDay,
            disabled: this.props.disabled,
            displayProp: 'value',
            options: this.state.day.options,
            placeholder: this.props.placeholder.day,
            valueProp: 'value',
            value: this.state.day.value.toString()
          }),
          _react2.default.createElement(_SelectField2.default, {
            changeCallback: this.handleChangeYear,
            disabled: this.props.disabled,
            displayProp: 'value',
            options: this.state.year.options,
            placeholder: this.props.placeholder.year,
            valueProp: 'value',
            value: this.state.year.value.toString()
          })
        )
      );
    }
  }]);

  return DatePicker;
}(_react2.default.Component);

DatePicker.defaultProps = {
  min: { month: '-0', day: '-0', year: '-10' },
  max: { month: '+0', day: '+0', year: '+10' },
  format: 'YYYY-MM-DD',
  placeholder: {
    month: 'Month',
    day: 'Day',
    year: 'Year'
  }
};
DatePicker.propTypes = {
  /**
   * Max date - object with month, day, year.
   */
  max: _propTypes2.default.object,
  /**
   * Min date - object with month, day, year.
   */
  min: _propTypes2.default.object,
  /**
   * Date string.
   */
  value: _propTypes2.default.string,
  /**
   * Date format - any valid Moment.js format string.
   */
  format: _propTypes2.default.string,
  /**
   * A callback function to be called when the value changes.
   */
  changeCallback: _propTypes2.default.func,
  /**
   * Optional CSS class(es) to be used for local styles (string or array of strings)
   */
  optClass: _propTypes2.default.oneOfType([_propTypes2.default.array, _propTypes2.default.string]),
  /**
   * If true, will display the inputs inline on smaller screens (default 100% width)
   */
  inlineSmallScreen: _propTypes2.default.bool,
  /**
   * Text shown above the date picker.
   */
  label: _propTypes2.default.oneOfType([_propTypes2.default.node, _propTypes2.default.string]),
  /**
   * Whether the select field is disabled.
   */
  disabled: _propTypes2.default.bool,
  /**
   * An object of key/val pairs to set custom placeholders on each field eg: { month: 'M', day: 'D', year: 'Y' }
   */
  placeholder: _propTypes2.default.object
};

var _initialiseProps = function _initialiseProps() {
  var _this2 = this;

  this._dateHelper = this.props.dateHelper ? this.props.dateHelper : _DateHelper2.default;
  this.state = {
    year: {
      min: 0,
      value: 0,
      max: 0,
      options: []
    },
    month: {
      min: 0,
      value: 0,
      max: 0,
      options: []
    },
    day: {
      min: 0,
      value: 0,
      max: 0,
      options: []
    },
    value: ''
  };

  this._initDate = function (date, format, props) {
    var dateObj = {
      year: {
        min: 0,
        value: 0,
        max: 0,
        options: []
      },
      month: {
        min: 0,
        value: 0,
        max: 0,
        options: []
      },
      day: {
        min: 0,
        value: 0,
        max: 0,
        options: []
      },
      value: ''
    };

    var mDate = date === undefined ? _moment2.default.utc() : _moment2.default.utc(date, format);

    // selected date values
    dateObj.year.value = _this2._dateHelper.getYear(mDate);
    dateObj.month.value = _this2._dateHelper.getMonth(mDate);
    dateObj.day.value = _this2._dateHelper.getDate(mDate);

    dateObj.value = mDate.format(format);

    // min & max values
    dateObj.year.min = _this2._getMinOrMax(props.min, 'year');
    dateObj.year.max = _this2._getMinOrMax(props.max, 'year');
    dateObj.month.min = _this2._getMinOrMax(props.min, 'month');
    dateObj.month.max = _this2._getMinOrMax(props.max, 'month');
    dateObj.day.min = _this2._getMinOrMax(props.min, 'day');
    dateObj.day.max = _this2._getMinOrMax(props.max, 'day');

    // options
    dateObj.year.options = _this2._getYears(dateObj.year.min, dateObj.year.max);
    dateObj.month.options = _this2._getMonths(dateObj);
    dateObj.day.options = _this2._getDays(dateObj);

    _this2.setState(dateObj);
  };

  this._getMinOrMax = function (minOrMax, type) {
    var momentDate = void 0;
    var value = void 0;

    if (minOrMax[type] === 'current') {
      momentDate = _moment2.default.utc();
    } else if (minOrMax[type].indexOf('+') !== -1) {
      momentDate = _moment2.default.utc().add(Math.abs(minOrMax[type]), type);
    } else if (minOrMax[type].indexOf('-') !== -1) {
      momentDate = _moment2.default.utc().subtract(Math.abs(minOrMax[type]), type);
    } else {
      value = minOrMax[type];
    }

    if (momentDate) {
      switch (type) {
        case 'year':
          value = _this2._dateHelper.getYear(momentDate);
          break;
        case 'month':
          value = _this2._dateHelper.getMonth(momentDate);
          break;
        case 'day':
          value = _this2._dateHelper.getDate(momentDate);
          break;
      }
    }

    return parseInt(value);
  };

  this._getYears = function (min, max) {
    var yearOptions = [];

    for (var i = min; i <= max; i++) {
      yearOptions.push({ value: i.toString() });
    }

    return yearOptions;
  };

  this._getMonths = function (dateObj) {
    var monthOptions = [];
    var checkMin = dateObj.year.value === dateObj.year.min;
    var checkMax = dateObj.year.value === dateObj.year.max;

    var start = checkMin ? dateObj.month.min : 0;
    var end = checkMax ? dateObj.month.max + 1 : 12;

    for (var i = start; i < end; i++) {
      monthOptions.push({ value: i.toString(), display: _moment2.default.utc(i + 1, 'MM').format('MMM') });
    }

    // if selected month is greater than max month, change it to max month
    if (checkMax && dateObj.month.value > dateObj.month.max) {
      dateObj.month.value = dateObj.month.max;
    }

    // if selected month is lower than min month, change it to min month
    if (checkMin && dateObj.month.value < dateObj.month.min) {
      dateObj.month.value = dateObj.month.min;
    }

    return monthOptions;
  };

  this._getDays = function (dateObj) {
    var dayOptions = [];

    var checkMin = dateObj.year.value === dateObj.year.min && dateObj.month.value === dateObj.month.min;
    var checkMax = dateObj.year.value === dateObj.year.max && dateObj.month.value === dateObj.month.max;
    var daysInMonth = _moment2.default.utc(dateObj.year.value + '-' + (dateObj.month.value + 1), 'YYYY-M').daysInMonth();

    var start = checkMin ? dateObj.day.min : 1;
    var end = checkMax ? dateObj.day.max : daysInMonth;

    for (var i = start; i <= end; i++) {
      dayOptions.push({ value: i.toString() });
    }

    // if selected day is greater than max day in a month, change it to max day in a month
    if (dateObj.day.value > daysInMonth) {
      dateObj.day.value = daysInMonth;
    }

    // if selected day is greater than max day, change it to max day
    if (checkMax && dateObj.day.value > dateObj.day.max) {
      dateObj.day.value = dateObj.day.max;
    }

    // if selected day is lower than min day, change it to min day
    if (checkMin && dateObj.day.value < dateObj.day.min) {
      dateObj.day.value = dateObj.day.min;
    }

    dateObj.value = _this2._getValue(dateObj, _this2.props.format);
    return dayOptions;
  };

  this._getValue = function (state, format) {
    return _moment2.default.utc().year(state.year.value).month(state.month.value).date(state.day.value).format(format);
  };

  this.handleChangeYear = function (event) {
    var state = _this2.state;

    state.year.value = parseInt(event.target.value);
    state.value = _this2._getValue(state, _this2.props.format);

    state.month.options = _this2._getMonths(state);
    state.day.options = _this2._getDays(state);
    _this2.setState({
      year: state.year,
      month: state.month,
      day: state.day,
      value: state.value
    }, function () {
      _this2.callback(state.value);
    });
  };

  this.handleChangeMonth = function (event) {
    var state = _this2.state;

    state.month.value = parseInt(event.target.value);
    state.value = _this2._getValue(state, _this2.props.format);
    state.day.options = _this2._getDays(state);
    _this2.setState({
      month: state.month,
      day: state.day,
      value: state.value
    }, function () {
      _this2.callback(state.value);
    });
  };

  this.handleChangeDay = function (event) {
    var state = _this2.state;

    state.day.value = parseInt(event.target.value);
    state.value = _this2._getValue(state, _this2.props.format);
    _this2.setState({
      day: state.day,
      value: state.value
    }, function () {
      _this2.callback(state.value);
    });
  };

  this.callback = function (value) {
    if (typeof _this2.props.changeCallback === 'function') {
      _this2.props.changeCallback({
        target: {
          name: _this2.props.name,
          value: value
        }
      });
    }
  };

  this.UNSAFE_componentWillMount = function () {
    _this2._initDate(_this2.props.value, _this2.props.format, _this2.props);
  };

  this.UNSAFE_componentWillReceiveProps = function (nextProps) {
    if (nextProps.value !== _this2.props.value || nextProps.min !== _this2.props.min || nextProps.max !== _this2.props.max) {
      _this2._initDate(nextProps.value, nextProps.format, nextProps);
    }
  };
};

exports.default = DatePicker;